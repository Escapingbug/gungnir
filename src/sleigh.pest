// ======== BASE LEXER ===========

// reversed words and keywords
RES_WITH = { "with" }
KEY_ALIGNMENT = { "alignment" }
KEY_ATTACH = { "attach" }
KEY_BIG = { "big" }
KEY_BITRANGE = { "bitrange" }
KEY_BUILD = { "build" }
KEY_CALL = { "call" }
KEY_CONTEXT = { "context" }
KEY_CROSSBUILD = { "crossbuild" }
KEY_DEC = { "dec" }
KEY_DEFAULT = { "default" }
KEY_DEFINE = { "define" }
KEY_ENDIAN = { "endian" }
KEY_EXPORT = { "export" }
KEY_GOTO = { "goto" }
KEY_HEX = { "hex" }
KEY_LITTLE = { "little" }
KEY_LOCAL = { "local" }
KEY_MACRO = { "macro" }
KEY_NAMES = { "names" }
KEY_NOFLOW = { "noflow" }
KEY_OFFSET = { "offset" }
KEY_PCODEOP = { "pcodeop" }
KEY_RETURN = { "return" }
KEY_SIGNED = { "signed" }
KEY_SIZE = { "size" }
KEY_SPACE = { "space" }
KEY_TOKEN = { "token" }
KEY_TYPE = { "type" }
KEY_UNIMPL = { "unimpl" }
KEY_VALUES = { "values" }
KEY_VARIABLES = { "variables" }
KEY_WORDSIZE = { "wordsize" }

// grouping block and sectioning symbols
LBRACE = { "{" }
RBRACE = { "}" }
LBRACKET = { "[" }
RBRACKET = { "]" }
LPAREN = { "(" }
RPAREN = { ")" }

// miscellaneous
ELLIPSIS = { "..." }
UNDERSCORE = { "_" }
COLON = { ":" }
COMMA = { "," }
EXCLAIM = { "!" }
TILDE = { "~" }
SEMI = { ";" }

// ---- operators ----
ASSIGN = { "=" }
// comparisons
EQUAL = { "==" }
NOTEQUAL = { "!=" }
LESS = { "<" }
GREAT = { ">" }
LESSEQUAL = { "<=" }
GREATEQUAL = { ">=" }

// boolean and bitwise logic operations
BOOL_OR = { "||" }
BOOL_XOR = { "^^" }
BOOL_AND = { "&&" }
PIPE = { "|" }
CARET = { "^" }
AMPERSAND = { "&" }

// shifting operations
LEFT = { "<<" }
RIGHT = { ">>" }

// arithmetic operations
PLUS = { "+" }
MINUS = { "-" }
ASTERISK = { "*" }
SLASH = { "/" }
PERCENT = { "%" }

// explicitily named boolean operations
SPEC_OR = { "$or" }
SPEC_AND = { "$and" }
SPEC_XOR = { "$xor" }

// ids, literals

IDENTIFIER = @{ !(RES_IS | RES_IF) ~ ALPHAUP ~ (ALPHAUP | ASCII_DIGIT)* }
ALPHAUP = { "_" | "." | ASCII_ALPHA }
QSTRING = @{ "\"" ~ (ESCAPE | (!("\\" | "\"") ~ ANY))* ~ "\""}
ESCAPE = @{
    "\\" ~ ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\")
    | UNICODE_ESCAPE
    | OCTAL_ESCAPE
}
OCTAL_ESCAPE = @{
    "\\" ~ ('0'..'3') ~ ASCII_OCT_DIGIT ~ ASCII_OCT_DIGIT
    | "\\" ~ ASCII_OCT_DIGIT ~ ASCII_OCT_DIGIT
    | "\\" ~ ASCII_OCT_DIGIT
}
UNICODE_ESCAPE = @{
    "\\" ~ "u" ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT
}
DEC_INT = @{ ASCII_DIGIT+ }
HEX_INT = @{ "0x" ~ ASCII_HEX_DIGIT+ }
BIN_INT = @{ "0b" ~ ASCII_BIN_DIGIT+ }

// ignored things, errors
LINECOMMENT = @{ "#" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
COMMENT = _{
  LINECOMMENT
}
WHITESPACE = _{ WHITE_SPACE }

// ======== DISPLAY LEXER ========
DISPCHAR = { "@" | "$" | "?" }
RES_IS = { "is" }

// ======== SEMANTIC LEXER =======
// floating point comparisons
FEQUAL = { "f==" }
FNOTEQUAL = { "f!=" }
FLESS = { "f<" }
FGREAT = { "f>" }
FLESSEQUAL = { "f<=" }
FGREATEQUAL = { "f>=" }

// floating point operations
FPLUS = { "f+" }
FMINUS = { "f-" }
FMULT = { "f*" }
FDIV = { "f/" }

// signed comparisons
SLESS = { "s<" }
SGREAT = { "s>" }
SLESSEQUAL = { "s<=" }
SGREATEQUAL = { "s>=" }

// signed operations
SRIGHT = { "s>>" }
SDIV = { "s/" }
SREM = { "s%" }

// reserved words
RES_IF = { "if" }

// ======== display parser ========
// This is the parser used in the display portion. It's root rule is display, which will swap in
// the corresponding DisplayLexer. Instead of overriding the lexer rules for operators and other
// special symbols, the parser simply recognizes them and just uses them for their characters.

display = _{ COLON ~ pieces ~ RES_IS }
pieces = _{ printpiece* }
printpiece = {
  identifier
  | concatenate
  | qstring
  | WHITESPACE
  | special
}
// Adjacent print pieces are already catenated, but two adjacent identifiers must be separated by
// something in the source. I suppose an empty string "" would also do, but this is clearer.
concatenate = { CARET }
qstring = _{
  QSTRING
}
special = @{
  DISPCHAR
  | LINECOMMENT
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | LPAREN
  | RPAREN
  | ELLIPSIS
  | EQUAL
  | NOTEQUAL
  | LESS
  | GREAT
  | LESSEQUAL
  | GREATEQUAL
  | ASSIGN
  | COLON
  | COMMA
  | ASTERISK
  | BOOL_OR
  | BOOL_XOR
  | BOOL_AND
  | PIPE
  | AMPERSAND
  | LEFT
  | RIGHT
  | PLUS
  | MINUS
  | SLASH
  | PERCENT
  | EXCLAIM
  | TILDE
  | SEMI
  | SPEC_OR
  | SPEC_AND
  | SPEC_XOR
  | HEX_INT
  | BIN_INT
  | DEC_INT
}

// ======= semantic parser =======

// This is the parser used in the semantics portion. It's root rule is semanticbody, which will
// swap in the corresponding SemanticLexer.
semanticbody = {
  LBRACE ~ semantic ~ RBRACE
}
semantic = _{
  code_block
}

code_block = _{
  statements | ""
}

statements = _{
 statement+
}

label = {
  LESS ~ identifier ~ GREAT
}

section_def = {
  LEFT ~ identifier ~ RIGHT
}

statement = {
  (
     assignment
     | declaration
     | funcall
     | build_stmt
     | crossbuild_stmt
     | goto_stmt
     | cond_stmt
     | call_stmt
     | export
     | return_stmt
  ) ~ SEMI
//  | "" <-- this makes it cannot fail, what the fuck
  | label
  | section_def
//  | outererror
}

// maybe we do not need error handling?
//outererror = {
//}

assignment = {
  KEY_LOCAL ~ lvalue ~ ASSIGN ~ expr
  | lvalue ~ ASSIGN ~ expr
}

declaration = {
  KEY_LOCAL ~ identifier ~ COLON ~ constant
  | KEY_LOCAL ~ identifier
}

lvalue = {
  sembitrange
  | identifier ~ COLON ~ constant
  | identifier
  | sizedstar ~ expr
}

sembitrange = {
  identifier ~ LBRACKET ~ constant ~ COMMA ~ constant ~ RBRACKET
}

sizedstar = {
  ASTERISK ~ LBRACKET ~ identifier ~ RBRACKET ~ COLON ~ constant
  | ASTERISK ~ LBRACKET ~ identifier ~ RBRACKET
  | ASTERISK ~ COLON ~ constant
  | ASTERISK
}

funcall = {
  expr_apply
}

build_stmt = {
  KEY_BUILD ~ identifier
}

crossbuild_stmt = {
  KEY_CROSSBUILD ~ varnode ~ COMMA ~ identifier
}

goto_stmt = {
  KEY_GOTO ~ jumpdest
}

jumpdest = {
  identifier
  | LBRACKET ~ expr ~ RBRACKET
  | integer
  | constant ~ LBRACKET ~ identifier ~ RBRACKET
  | label
}

cond_stmt = {
  RES_IF ~ expr ~ goto_stmt
}

call_stmt = {
  KEY_CALL ~ jumpdest
}

return_stmt = {
  KEY_RETURN ~ LBRACKET ~ expr ~ RBRACKET
}

sizedexport = {
  sizedstar ~ identifier
}

export = {
  KEY_EXPORT ~ sizedexport
  | KEY_EXPORT ~ varnode
}

expr = {
  expr_boolor
}

expr_boolor = _{
  expr_booland ~ (expr_boolor_op ~ expr_booland)*
}

expr_boolor_op = {
  BOOL_OR
}

expr_booland = _{
  expr_or ~ (booland_op ~ expr_or)*
}

booland_op = {
  BOOL_AND
  | BOOL_XOR
}

expr_or = _{
  expr_xor ~ (expr_or_op ~ expr_xor)*
}

expr_or_op = {
  PIPE
}

expr_xor = _{
  expr_and ~ (expr_xor_op ~ expr_and)*
}

expr_xor_op = {
  CARET
}

expr_and = _{
  expr_eq ~ (expr_and_op ~ expr_eq)*
}

expr_and_op = {
  AMPERSAND
}

expr_eq = _{
  expr_comp ~ (eq_op ~ expr_comp)*
}

eq_op = {
  EQUAL
  | NOTEQUAL
  | FEQUAL
  | FNOTEQUAL
}

expr_comp = _{
  expr_shift ~ (compare_op ~ expr_shift)*
}

compare_op = {
  LESS
  | GREATEQUAL
  | LESSEQUAL
  | GREAT
  | SLESS
  | SGREATEQUAL
  | SLESSEQUAL
  | SGREAT
  | FLESS
  | FGREATEQUAL
  | FLESSEQUAL
  | FGREAT
}

expr_shift = _{
  expr_add ~ (shift_op ~ expr_add)*
}

shift_op = {
  LEFT
  | RIGHT
  | SRIGHT
}

expr_add = _{
  expr_mult ~ (add_op ~ expr_mult)*
}

add_op = {
  PLUS
  | MINUS
  | FPLUS
  | FMINUS
}

expr_mult = _{
  expr_unary ~ (mult_op ~ expr_unary)*
}

mult_op = {
  ASTERISK
  | SLASH
  | PERCENT
  | SDIV
  | SREM
  | FMULT
  | FDIV
}

expr_unary = _{
  unary_op? ~ expr_func
}

unary_op = {
  EXCLAIM
  | TILDE
  | MINUS
  | FMINUS
  | sizedstar
}

expr_func = _{
  expr_apply
  | expr_term
}

expr_apply = {
  identifier ~ expr_operands
}

expr_operands = {
  LPAREN ~ (expr ~ (COMMA ~ expr)*)? ~ RPAREN
}

expr_term = {
  LPAREN ~ expr ~ RPAREN
  | sembitrange
  | varnode
}

varnode = {
  integer ~ COLON ~ constant
  | identifier ~ COLON ~ constant
  | integer
  | identifier
  | AMPERSAND ~ COLON ~ constant ~ varnode
  | AMPERSAND ~ varnode
}

constant = {
  integer
}

integer = {
  HEX_INT
  | BIN_INT
  | DEC_INT
}

// ============ sleigh parser ============

// root rule
spec = {
  //SOI ~ endiandef ~ (definition | constructorlike)* ~ EOI
  SOI ~ endiandef ~ (definition | constructorlike)* ~ EOI
}

endiandef = {
  KEY_DEFINE ~ KEY_ENDIAN ~ ASSIGN ~ endian ~ SEMI
}

endian = {
  KEY_BIG
  | KEY_LITTLE
}

definition = {
  (
    aligndef
    | tokendef
    | contextdef
    | spacedef
    | varnodedef
    | bitrangedef
    | pcodeopdef
    | valueattach
    | nameattach
    | varattach
  ) ~ SEMI
}

aligndef = {
  KEY_DEFINE ~ KEY_ALIGNMENT ~ ASSIGN ~ integer
}

tokendef = {
  KEY_DEFINE ~ KEY_TOKEN ~ identifier ~ LPAREN ~ integer ~ RPAREN ~ fielddefs
}

fielddefs = {
  fielddef*
}

fielddef = {
  strict_id ~ ASSIGN ~ LPAREN ~ integer ~ COMMA ~ integer ~ RPAREN ~ fieldmods
}

fieldmods = {
  fieldmod+
  | ""
}

fieldmod = {
  KEY_SIGNED
  | KEY_HEX
  | KEY_DEC
}

contextfielddefs = {
  contextfielddef*
}

contextfielddef = {
  identifier ~ ASSIGN ~ LPAREN ~ integer ~ COMMA ~ integer ~ RPAREN ~ contextfieldmods
}

contextfieldmods = {
  contextfieldmod+
  | ""
}

contextfieldmod = {
  KEY_SIGNED
  | KEY_NOFLOW
  | KEY_HEX
  | KEY_DEC
}

contextdef = {
  KEY_DEFINE ~ KEY_CONTEXT ~ identifier ~ contextfielddefs
}

spacedef = {
  KEY_DEFINE ~ KEY_SPACE ~ identifier ~ spacemods
}

spacemods = {
  spacemod*
}

spacemod = {
  typemod
  | sizemod
  | wordsizemod
  | KEY_DEFAULT
}

typemod = {
  KEY_TYPE ~ ASSIGN ~ typ
}

typ = {
  identifier
}

sizemod = {
  KEY_SIZE ~ ASSIGN ~ integer
}

wordsizemod = {
  KEY_WORDSIZE ~ ASSIGN ~ integer
}

varnodedef = {
  KEY_DEFINE ~ identifier ~ KEY_OFFSET ~ ASSIGN ~ integer ~ KEY_SIZE ~ ASSIGN ~ integer ~ identifierlist
}

bitrangedef = {
  KEY_DEFINE ~ KEY_BITRANGE ~ bitranges
}

bitranges = {
  bitrange+
}

bitrange = {
  identifier ~ ASSIGN ~ identifier ~ LBRACKET ~ integer ~ COMMA ~ integer ~ RBRACKET
}

pcodeopdef = {
  KEY_DEFINE ~ KEY_PCODEOP ~ identifierlist
}

valueattach = {
  KEY_ATTACH ~ KEY_VALUES ~ identifierlist ~ intblist
}

nameattach = {
  KEY_ATTACH ~ KEY_NAMES ~ identifierlist ~ stringoridentlist
}

varattach = {
  KEY_ATTACH ~ KEY_VARIABLES ~ identifierlist ~ identifierlist
}

identifierlist = {
  LBRACKET ~ id_or_wild+ ~ RBRACKET
  | id_or_wild
}

stringoridentlist = {
  LBRACKET ~ stringorident+ ~ RBRACKET
  | stringorident
}

stringorident = {
  id_or_wild
  | qstring
}

intblist = {
  LBRACKET ~ intbpart+ ~ RBRACKET
  | neginteger
}

intbpart = {
  neginteger
  | UNDERSCORE
}

neginteger = {
  integer
  | MINUS ~ integer
}

constructorlike = {
  macrodef
  | withblock
  | constructor
}

macrodef = {
  KEY_MACRO ~ identifier ~ LPAREN ~ arguments ~ RPAREN ~ semanticbody
}

arguments = {
  oplist
  | ""
}

oplist = {
  identifier ~ (COMMA ~ identifier)*
}

withblock = {
  RES_WITH ~ id_or_nil ~ COLON ~ bitpat_or_nil ~ contextblock ~ LBRACE ~ constructorlikelist ~ RBRACE
}

id_or_nil = {
  identifier
  | ""
}

bitpat_or_nil = {
  bitpattern
  | ""
}

def_or_conslike = {
  definition
  | constructorlike
}

constructorlikelist = {
  def_or_conslike*
}

constructor = {
  ctorstart ~ bitpattern ~ contextblock ~ ctorsemantic
}

ctorsemantic = {
  semanticbody
  | KEY_UNIMPL
}

bitpattern = {
  pequation
}

ctorstart = {
  display
  | identifier ~ display
}

contextblock = {
  LBRACKET ~ ctxstmts ~ RBRACKET
  | ""
}

ctxstmts = {
  ctxstmt*
}

ctxstmt = {
  ctxassign ~ SEMI
  | pfuncall ~ SEMI
}

ctxassign = {
  ctxlval ~ ASSIGN ~ pexpression
}

ctxlval = {
  identifier
}

pfuncall = {
  pexpression_apply
}

pequation = {
  pequation_or
}

pequation_or = {
  pequation_seq ~ (pequation_or_op ~ pequation_seq)*
}

pequation_or_op = {
  PIPE
}

pequation_seq = {
  pequation_and ~ (pequation_seq_op~ pequation_and)*
}

pequation_seq_op = {
  SEMI
}

pequation_and = {
  pequation_ellipsis ~ (pequation_and_op ~ pequation_ellipsis)*
}

pequation_and_op = {
  AMPERSAND
}

pequation_ellipsis = {
  ELLIPSIS ~ pequation_ellipsis_right
  | pequation_ellipsis_right
}

pequation_ellipsis_right = {
  &(pequation_atomic ~ ELLIPSIS) ~ pequation_atomic ~ ELLIPSIS
  | pequation_atomic
}

pequation_atomic = {
  constraint
  | LPAREN ~ pequation ~ RPAREN
}

constraint = {
  identifier ~ (constraint_op ~ pexpression2)?
}

constraint_op = {
  ASSIGN
  | NOTEQUAL
  | LESS
  | LESSEQUAL
  | GREAT
  | GREATEQUAL
}

pexpression = {
  pexpression_or
}

pexpression_or = {
  pexpression_xor ~ (pexpression_or_op ~ pexpression_xor)*
}

pexpression_or_op = {
  PIPE
  | SPEC_OR
}

pexpression_xor = {
  pexpression_and ~ (pexpression_xor_op ~ pexpression_and)*
}

pexpression_xor_op = {
  CARET
  | SPEC_XOR
}

pexpression_and = {
  pexpression_shift ~ (pexpression_and_op ~ pexpression_shift)*
}

pexpression_and_op = {
  AMPERSAND
  | SPEC_AND
}

pexpression_shift = {
  pexpression_add ~ (pexpression_shift_op ~ pexpression_add)*
}

pexpression_shift_op = {
  LEFT
  | RIGHT
}

pexpression_add = {
  pexpression_mult ~ (pexpression_add_op ~ pexpression_mult)
}

pexpression_add_op = {
  PLUS
  | MINUS
}

pexpression_mult = {
  pexpression_unary ~ (pexpression_mult_op ~ pexpression_unary)*
}

pexpression_mult_op = {
  ASTERISK
  | SLASH
}

pexpression_unary = {
  pexpression_unary_op ~ pexpression_term
  | pexpression_func
}

pexpression_unary_op = {
  MINUS
  | TILDE
}

pexpression_func = {
  pexpression_apply
  | pexpression_term
}

pexpression_apply = {
  identifier ~ pexpression_operands
}

pexpression_operands = {
  LPAREN ~ (pexpression ~ (COMMA ~ pexpression)*)? ~ RPAREN
}

pexpression_term = {
  identifier
  | integer
  | LPAREN ~ pexpression ~ RPAREN
}

pexpression2 = {
  pexpression2_or
}

pexpression2_or = {
  pexpression2_xor ~ (pexpression2_or_op ~ pexpression2_xor)*
}

pexpression2_or_op = {
  SPEC_OR
}

pexpression2_xor = {
  pexpression2_and ~ (pexpression2_xor_op ~ pexpression2_and)*
}

pexpression2_xor_op = {
  SPEC_OR
}

pexpression2_and = {
  pexpression2_shift ~ (pexpression2_and_op ~ pexpression2_shift)*
}

pexpression2_and_op = {
  SPEC_AND
}

pexpression2_shift = {
  pexpression2_add ~ (pexpression2_shift_op ~ pexpression2_add)*
}

pexpression2_shift_op = {
  LEFT
  | RIGHT
}

pexpression2_add = {
  pexpression2_mult ~ (pexpression2_add_op ~ pexpression2_mult)*
}

pexpression2_add_op = {
  PLUS
  | MINUS
}

pexpression2_mult = {
  pexpression2_unary ~ (pexpression2_mult_op ~ pexpression2_unary)*
}

pexpression2_mult_op = {
  ASTERISK
  | SLASH
}

pexpression2_unary = {
  pexpression2_unary_op ~ pexpression2_term
  | pexpression2_func
}

pexpression2_unary_op = {
  MINUS
  | TILDE
}

pexpression2_func = {
  pexpression2_apply
  | pexpression2_term
}

pexpression2_apply = {
  identifier ~ pexpression2_operands
}

pexpression2_operands = {
  LPAREN ~ (pexpression2 ~ (COMMA ~ pexpression2)*)? ~ RPAREN
}

pexpression2_term = {
  identifier
  | integer
  | LPAREN ~ pexpression2 ~ RPAREN
}

id_or_wild = {
  identifier
  | wildcard
}

wildcard = {
  UNDERSCORE
}

identifier = {
  strict_id
  | key_as_id
}

key_as_id = {
  KEY_ALIGNMENT
  | KEY_ATTACH
  | KEY_BIG
  | KEY_BITRANGE
  | KEY_BUILD
  | KEY_CALL
  | KEY_CONTEXT
  | KEY_CROSSBUILD
  | KEY_DEC
  | KEY_DEFAULT
  | KEY_DEFINE
  | KEY_ENDIAN
  | KEY_EXPORT
  | KEY_GOTO
  | KEY_HEX
  | KEY_LITTLE
  | KEY_LOCAL
  | KEY_MACRO
  | KEY_NAMES
  | KEY_NOFLOW
  | KEY_OFFSET
  | KEY_PCODEOP
  | KEY_RETURN
  | KEY_SIGNED
  | KEY_SIZE
  | KEY_SPACE
  | KEY_TOKEN
  | KEY_TYPE
  | KEY_UNIMPL
  | KEY_VALUES
  | KEY_VARIABLES
  | KEY_WORDSIZE
}

strict_id = {
  IDENTIFIER
}
